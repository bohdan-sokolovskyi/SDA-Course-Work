/*
	algorithms.h
*/

/*
	Бібліотека яка займається сортуванням масивів
*/

/* для запобігання повторного підключення бібліотеки */
#ifndef ALGORITHMS_H
#define ALGORITHMS_H

/* підключаємо стандартні бібліотеки мови С */
#include <time.h>
/* підключаємо власні бібліотеки */
#include "elements.h"

/************ Функції які сортують вектор ************/
/* функція яка сортує вектор методом вставки №1 */
clock_t sortSI_1_vector(const int);
/* Функція яка сортує вектор методом вибору №8 */
clock_t sortSS_8_vector(const int);
/* Функція яка сортує вектор методом Шелла */
clock_t sortShell_vector(const int);
/* Функція яка сортує вектор методом Швидкого сортування */
clock_t sortQSort_vector(const int);
/* Примітка: так як функція швидкого сортування рекурсивна
час виконня вимірюється в межах його виклику а саме у sortQSort_vector() */
//ця функція у якій алгоритм швидкого сортування
void QSort_vector(int, int);
/*****************************************************/

/************ Функції які сортують куб ************/
/* функція яка сортує куб методом вставки №1 */
clock_t sortSI_1_cube(const int, const int);
/* Функція яка сортує куб методом вибору №8 */
clock_t sortSS_8_cube(const int, const int);
/* Функція яка сортує куб методом Шелла */
clock_t sortShell_cube(const int, const int);
/* Функція яка сортує куб методом швидкого сортування */
clock_t sortQSort_cube(const int, const int);
/* Примітка: так як функція рекурсивна, час рахуемо там де її виклик, а саме у sortQSort_cube()
тому наступні дві функції не повертають час, повертає саме sortQSort_cube */
//сортуємо головну діагональ швидким сортуванням
void sort_QSort_mainDiag(const int, int, int);
//сортуємо побічну діагональ швидким сортуванням
void sort_QSort_sideDiag(const int, const int, int, int);
/*****************************************************/

#endif
